#!/usr/bin/env python
# -*- coding: utf8 -*-


"""
name: pul_rn

Utility to retrieve render node info
It processes HTTP request to the server to present information about the state of the RN pool

Request example: "query?attr=id&attr=name"

Default fields retrieved from the server are:
id              --> unique id of the folder or task node

"""
__author__      = "Jérôme Samson"
__copyright__   = "Copyright 2013, Mikros Image"



# Imports from libs
from tornado import ioloop, escape
from tornado.httpclient import HTTPClient, HTTPError
from optparse import OptionParser
from datetime import datetime

try:
    import simplejson as json
except ImportError:
    import json

import sys
import time
import urllib

# Imports from local dir
from settings import Settings
from common import ConstraintFactory
from common import PlainHelpFormatter
from common import RenderNodeTable


_query = "query/rn?"
_hostname = Settings.hostname
_port = Settings.port

VERBOSE = Settings.verbose
REQUEST_BEGIN_TIME = 0
REQUEST_END_TIME = 0



def handle_request(response):
    """
    Callback for handling the request result.
    We try to load the data as JSON and display it according to the arguments or default specification
    """

    REQUEST_END_TIME = time.time() - REQUEST_BEGIN_TIME

    if VERBOSE: print ""
    if VERBOSE: print "Getting response for request \""+_query+"\" in " + str(REQUEST_END_TIME)

    if VERBOSE: print "DEBUG - Response: " + str(response)

    if response.error:
        print ""
        print "Error:   %s" % response.error
        print "         %s" % response.body
        print ""
    else:

        if response.body == "":
            print ""
            print "No rendernodes registered."
            print ""
            return


        # Parsing json
        try:
            _data = json.loads ( response.body )
        except KeyError, e:
            print "Error unknown key : " + str(e)
            return
        except Exception, e:
            print "Error loading json: " + str(e)
            return

        if len(_data['items']) is 0:
            print ""
            print "Empty result list received."
            print ""
            return

        # Sorting data according to table description
        if len(_data['items']) is not 0:
            if options.sortField in _data['items'][0].keys():
                _data['items'] = sorted(_data['items'], key=lambda row : row[options.sortField], reverse=options.reverseOrder)
                pass
            else:
                print ""
                print "WARNING: impossible to sort using \"%s\", the field does not exist." % options.sortField

        # Display data according to given args
        if options.json:
            print json.dumps( _data, indent=4 )

        elif options.csv:

            # Print header
            header = ""
            if len(_data['items']) is not 0:
                header += ";".join(_data['items'][0].keys())
                print header

            # Print rows with ";" separator and without field indicator (usually " or ')
            for row in _data['items']:
                line=""
                for val in row.values():
                    line += ";"+( str(val) )
                print line[1:]

        else:
            try:
                RenderNodeTable.displayHeader( RenderNodeTable )

                for row in _data['items']:
                    RenderNodeTable.displayRow( row, RenderNodeTable )

                RenderNodeTable.displayFooter( _data['summary'], RenderNodeTable )
            except KeyError, e:
                pass



    # Quit loop
    ioloop.IOLoop.instance().stop()

def process_args():
    '''
    Manages arguments parsing definition and help information
    '''

    usage = "usage: %prog [general options] [output option]"
    desc=""" 
Displays information about the render nodes registered in the farm.
To restrict the display to render nodes of interest, a list of zero or more restriction options may be supplied.

Here is the complete list of fields that can be retrieved:

GENERIC:
  - id             unique int identifier
  - name           representing machine's hostname and port
  - puliversion    a string indicating the worker version number (from worker settings)

SYSTEM:  
  - ramSize        physical RAM size in MB
  - systemFreeRam  the RAM available on the system (updated each ping)
  - coresNumber    number of cores
  - speed          cpu clock speed in GHz
  - host           node hostname (without domain name)
  - port           node port

STATE INFO:
  - status         index of statuses in: [ Unknown, Booting, Paused, Idle, Assigned, Working, Finishing ]
                   or "short" names: [ U, B, P, I, A, W, F ]
  - excluded       flag indicating if the node has been set to quarantine
  - createDate     timestamp indicating when the worker process started
  - registerDate   timestamp indicating when the worker registered on the server
  - lastAliveTime  timestamp indicating when the worker was last updated on the server
  - performance    custom performance index


Here is the list of field on which a constraint can be set and the expected filter type:
  - name:           a string representing a regexp
  - status:         int
  - speed:          float
  - ramSize:        int
  - coresNumber:    int

    """

    parser = OptionParser(usage=usage, description=desc, version="%prog 0.1", formatter=PlainHelpFormatter() )

    parser.add_option("-c", "--csv", action="store_true", dest="csv", help="Returns data formatted as raw CSV file [%default]", default=False)
    parser.add_option("-j", "--json", action="store_true", dest="json", help="Returns data formatted as JSON [%default]", default=False)

    parser.add_option("-o", "--sort", action="store", dest="sortField", help="Sort items with the given field [%default]", default='id')
    parser.add_option("-r", "--reverse-order", action="store_true", dest="reverseOrder", help="Sort item in reverse order [%default]", default=False)
    
    parser.add_option("-C", "--constraint", action="append", type="string", help="Allow user to specify one or more filter constraints")
    parser.add_option("-a", "--attribute", action="append", type="string", help="Allow user to display specific attributes only (WARNING if defined, result will be presented as csv by default, it can be overriden by -j flag)")

    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Verbose mode [%default]", default=False)

    parser.add_option("-s", "--server", action="store", dest="hostname", help="Specified a target host to send the request")
    parser.add_option("-p", "--port", action="store", dest="port", help="Specified a target port")

    options, args = parser.parse_args()

    return options, args



if __name__ == '__main__':


    options, args = process_args()
    VERBOSE = options.verbose
    
    if VERBOSE:
        print "Command options: %s" % options
        print "Command arguments: %s" % args


    #
    # Apply display rules
    #
    if options.attribute is not None:
        # Specifc attributes is desired by arguments, we must ensure that either json or csv is activated 
        # And if not, activate csv display.
        if not options.json and not options.csv:
            options.csv = True


    #
    # Creating corresponding query
    #
    userConstraint = ConstraintFactory.makeQuery( pUserArguments=args, pUserOptions=options)
    if userConstraint is None:
        sys.exit(1)

    _query += userConstraint


    #
    # Set hotsname/port if given as arguments
    #
    if options.hostname is not None:
        _hostname = options.hostname

    if options.port is not None:
        _port = options.port

    if VERBOSE:
        print "Host: %s" % _hostname
        print "Port: %s" % _port
        print "Request: %s" % _query
        # print "http://%s:%s/%s" % ( _hostname, _port, _query )

    _request = "http://%s:%s/%s" % ( _hostname, _port, _query )

    REQUEST_BEGIN_TIME = time.time()

    # http_client = AsyncHTTPClient()
    # http_client.fetch( _request, handle_request )
    # ioloop.IOLoop.instance().start()

    http_client = HTTPClient()
    try:
        response = http_client.fetch( _request )
        handle_request( response )
    except HTTPError as e:
        print "Error:", e
    
    del(http_client)

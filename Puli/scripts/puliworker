#!/bin/sh
#
# /etc/init.d/puliworker
#
### BEGIN INIT INFO
# Provides:          puliworker
# Required-Start:    $syslog rpcbind $remote_fs autofs 
# Should-Start: 
# Required-Stop: 
# Should-Stop: 
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: puli worker
# Description:       Start or stop the worker that executes puli jobs.
### END INIT INFO

# init script variables
SERVICE=$(basename $0)
PIDDIR="/var/run/${SERVICE}"
PIDFILE="${PIDDIR}/${SERVICE}.pid"
PULI_USER="render"
export HOME="/homes/render"

# Python/Puli variables
export PYTHONPATH=/s/prods/ddd/_sandbox/jsa/distrib/OpenRenderManagement/Puli/src:${PYTHONPATH}
WORKER_BIN="/s/prods/ddd/_sandbox/jsa/distrib/OpenRenderManagement/Puli/scripts/workerd.py"

HOST=puliserver
PORT=8000

HOST_TEST=pulitest
PORT_TEST=8001


# Test if python script is available on automounted share.
test -x ${WORKER_BIN} || { echo "${WORKER_BIN} not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

if [ ! -d ${PIDDIR} ]; then
  mkdir ${PIDDIR}
  chown ${PULI_USER} ${PIDDIR}
fi

. /etc/rc.status
# Reset status of this service
rc_reset

case "$1" in
    start)
	echo -n "Starting ${SERVICE}..."
        ## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
        /sbin/startproc -p ${PIDFILE} -s -u${PULI_USER} "${WORKER_BIN}" -p ${PORT} -d 
	#>> /dev/null 2>&1
	sleep 2s

	# Remember status and be verbose.
        rc_status -v
	;;
    stop)
	echo -n "Shutting down ${SERVICE}..."
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.
	/sbin/killproc -TERM -p ${PIDFILE} python 

	# Remember status and be verbose
	rc_status -v
        ;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    status)
	echo -n "Checking for service ${SERVICE}..."
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.
	/sbin/checkproc -p ${PIDFILE} python

	# Remember status and be verbose
	rc_status -v
	;;

    start_test)
	echo -n "Starting ${SERVICE}..."
        ## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
        /sbin/startproc -p ${PIDFILE} -s -u${PULI_USER} "${WORKER_BIN}" -p ${PORT_TEST} -d -s ${HOST_TEST}
	#>> /dev/null 2>&1
	sleep 2s

	# Remember status and be verbose.
        rc_status -v
	;;

    restart_test)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start_test

	# Remember status and be quiet
	rc_status
	;;

    *)
	echo "Usage: ${SERVICE} {start|stop|status|restart|start_test|restart_test}"
	exit 1
	;;
esac
rc_exit

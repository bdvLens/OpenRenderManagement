#!/usr/bin/env python
# -*- coding: utf8 -*-

"""
name: pul_query

Job query utility for puli server
It processes HTTP request to the server to present information about the state of the job queue
Permet de lancer des requetes http au serveur pour recuperer certaines informations utiles.

Request example: "query?attr=id&attr=user&tree=false"

attr: allow to choose which attribute will be retrieved for each job [id user prod name ...]
format: specify the representation of the result set: a table, json or csv raw data
constraint: custom set of filters

Default fields retrieved from the server are:
id              --> unique id of the folder or task node
user            --> creator login
name            --> text description of the task
tags:prod       --> attribute of the task
tags:shot       --> attribute of the task
status          --> job status (Blocked, Ready, Running, Done, Error, Canceled, Paused)
completion      --> float value indicating a percent completion of the whole task
dispatchKey     --> indicates the priority of the job ("priority" attribute is deprecated)
startTime       --> job started
creationTime    --> job submitted
endTime         --> job ended
updateTime      --> last update
maxRN           --> max number of rendernode to assign to a particular task
allocatedRN     --> current number of allocated render nodes on this task
averageTimeByFrame -->

"""
__author__ = "Jerome Samson"
__copyright__ = "Copyright 2013, Mikros Image"


# Imports from libs
from tornado import ioloop, escape
from tornado.httpclient import AsyncHTTPClient, HTTPClient, HTTPError
from optparse import OptionParser
from optparse import IndentedHelpFormatter
from datetime import datetime

try:
    import simplejson as json
except ImportError:
    import json

import sys
import time
import socket
import errno

# Imports from local dir
from settings import Settings
from common import ConstraintFactory
from common import JobTable, CustomTable, CommandTable, DetailJobTable
from octopus.core.enums.node import NODE_STATUS_SHORT_NAMES


_query = "query?"
_hostname = Settings.hostname
_port = Settings.port

VERBOSE = Settings.verbose
REQUEST_BEGIN_TIME = ''
REQUEST_END_TIME = ''


def handle_request(response):
    """
    Callback for handling the request result.
    We try to load the data as JSON and display it according to the arguments or default specification
    """
    REQUEST_END_TIME = time.time() - REQUEST_BEGIN_TIME

    if VERBOSE:
        print ""
        print "Getting response for request \""+_query+"\" in " + str(REQUEST_END_TIME)
        print "DEBUG - Response: " + str(response)

    if response.error:
        print ""
        print "Error:   %s" % response.error
        print "         %s" % response.body
        print ""
    else:

        if response.body == "":
            print ""
            print "No jobs in queue."
            print ""
            return

        # Parsing json
        try:
            _data = json.loads(response.body)
        except KeyError, e:
            print "Error unknown key : " + str(e)
            return
        except Exception, e:
            print "Error loading json: " + str(e)
            return

        # Sorting data according to table description
        if len(_data['items']) is not 0:
            if options.sortField in _data['items'][0].keys():
                _data['items'] = sorted(_data['items'], key=lambda row: row[options.sortField], reverse=options.reverseOrder)
                pass
            else:
                print ""
                print "WARNING: impossible to sort using \"%s\", the field does not exist." % options.sortField

        # Display data according to given args
        if options.json:
            print json.dumps(_data, indent=4)

        elif options.csv:

            # Print header
            header = ""
            if len(_data['items']) is not 0:
                header += ";".join(_data['items'][0].keys())
                print header

            # Print rows with ";" separator and without field indicator (usually " or ')
            for row in _data['items']:
                line = ""
                for val in row.values():
                    line += ";" + (str(val))
                print line[1:]

        else:
            if options.data == 'job':
                if options.detail is True:
                    tableDescription = DetailJobTable
                else:
                    tableDescription = JobTable
            elif options.data == 'command':
                tableDescription = CommandTable

            # Default display
            CustomTable.displayHeader(tableDescription)
            for row in _data['items']:
                CustomTable.displayRow(row, tableDescription)
            CustomTable.displayFooter(_data['summary'], tableDescription)


class PlainHelpFormatter(IndentedHelpFormatter):
    '''
    Subclass of OptParse format handler, will allow to have a raw text formatting in usage and desc fields.
    '''
    def format_description(self, description):
        if description:
            return description + "\n"
        else:
            return ""


def process_args():
    '''
    Manages arguments parsing definition and help information
    '''

    usage = "usage: %prog [general options] [restriction list] [output option]"
    desc = """Displays information about the server render queue.
To restrict the display to jobs of interest, a list of zero or more restriction options may be supplied. Each restriction may be one of:
    - a user matches all jobs owned by the specified owner
    - a job id matches the specified job

In addition, user can specified one or several specific constraint with the "-C" option. A constraint expression which matches all jobs
that satisfy the specified expressions: FILTER="VALUE"
    user=jsa
    status=1 (value is a number corresponding to the states: "Blocked", "Ready", "Running", "Done", "Error", "Cancel", "Pause")
    prod="ddd"
    name="mon job"
    creationtime="2013-09-09 14:00:00" (It filters all jobs created AFTER the given date/time)
    starttime="2013-09-09 14:00:00" (It filters all jobs started AFTER the given date/time)
    endtime="2013-09-09 14:00:00" (It filters all jobs ended AFTER the given date/time)

Output options will indicate if the command will output information as human readable format, or csv or raw json
Default output will only return top level jobs in queue, user can override this to return in-depth data of job nodes hierarchy
If no output option is specified, the ouput will be a single line presenting the following information:
    - id, name, prod, shot, owner, priority, status
    - creation date, start date, end date, runtime
    - minTimeByFrame, maxTimeByFrame and averageTimeByFrame

Here is the list of field on which a constraint can be set and the expected filter type:
  - name:           a string representing a regexp
  - status:         int
  - TO FINISH



Example 1. Retrieve all task for a specific user:

> pul_query jsa

 ID     NAME          PROD  SHOT  IMG  OWNER   PRIO ST    %  SUBMITTED    START        END          RUN_TIME
--------------------------------------------------------------------------------------------------------------
 28834  TG-task-with  -     -     -    jsa        0  C    0  09/11 16:13            -            -  -
 28836  TG-task-with  -     -     -    jsa        0  C    0  09/11 18:00            -            -  -
 28838  TG-task-with  -     -     -    jsa        0  I    0  09/11 18:01            -            -  -
 28832  TG-task-with  -     -     -    jsa        0  C    0  09/11 16:05            -            -  -
 28833  TG-task-with  -     -     -    jsa        0  C    0  09/11 16:05            -            -  -

Summary: 5 of 8 tasks retrieved in 0.5 ms.


Example 2. Retrieve all tasks created after a given time for a specific user:

> pul_query jsa -C creationtime="2013-09-11 16:00:00"

 ID     NAME          PROD  SHOT  IMG  OWNER   PRIO ST    %  SUBMITTED    START        END          RUN_TIME
--------------------------------------------------------------------------------------------------------------
 28836  TG-task-with  -     -     -    jsa        0  C    0  09/11 18:00            -            -  -
 28838  TG-task-with  -     -     -    jsa        0  I    0  09/11 18:01            -            -  -

Summary: 2 of 8 tasks retrieved in 0.7 ms.


Example 3. Retrieve all tasks with status "Ready" for a specific user and presenting it as json:

> pul_query jsa -C status=1 -j

{ "tasks": [
        { "status": 1,
            "completion": 0.0,
            "updateTime": null,
            "name": "TG-task-with-ram_2",
            "creationTime": 1378915289.0,
            "priority": 0,
            "user": "jsa",
            "startTime": null,
            "endTime": null,
            "id": 28838
        }
    ],
    "summary": { "count": 1,
        "totalInDispatcher": 8,
        "requestTime": 0.00060296058654785156,
        "requestDate": "Thu Sep 12 11:14:48 2013"
    }
}


Reminder: Possible values for a job status
    0 --> Blocked  = B
    1 --> Ready    = I
    2 --> Running  = R
    3 --> Done     = D
    4 --> Error    = E
    5 --> Canceled = C
    6 --> Paused   = P
"""

    parser = OptionParser(usage=usage, description=desc, version="%prog 0.1", formatter=PlainHelpFormatter())

    parser.add_option("-c", "--csv", action="store_true", dest="csv", help="Return data formatted as raw CSV file [%default]", default=False)
    parser.add_option("-j", "--json", action="store_true", dest="json", help="Return data formatted as JSON [%default]", default=False)

    parser.add_option("-C", "--constraint", action="append", type="string", help="Allow user to specify one or more filter constraints")
    parser.add_option("-a", "--attribute", action="append", type="string", help="Allow user to display specific attributes only (WARNING if defined, result will be presented as csv by default, it can be overriden by -j flag)")

    parser.add_option("-t", "--tree",   action="store_true", dest="tree", help="Return full tree of tasks (not commands)", default=False)
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Verbose mode [%default]", default=False)

    parser.add_option("-o", "--sort", action="store", dest="sortField", help="Sort items with the given field [%default]", default='id')
    parser.add_option("-r", "--reverse-order", action="store_true", dest="reverseOrder", help="Sort item in reverse order [%default]", default=False)

    parser.add_option("-s", "--server", action="store", dest="hostname", help="Specify a target host to send the request")
    parser.add_option("-p", "--port", action="store", dest="port", help="Specify a target port")

    parser.add_option("-l", "--long", action="store_true", dest="detail", help="Enables a more detailled view", default="job")
    parser.add_option("-d", "--data", action="store", dest="data", type="string", help="request a specific type of data: command/job [%default]", default="job")
    options, args = parser.parse_args()

    return options, args


if __name__ == '__main__':

    options, args = process_args()
    VERBOSE = options.verbose

    if VERBOSE:
        print "Command options: %s" % options
        print "Command arguments: %s" % args

    #
    # Apply display rules
    #
    if options.attribute is not None:
        # Specifc attributes is desired by arguments, we must ensure that either json or csv is activated
        # And if not, activate csv display.
        if not options.json and not options.csv:
            options.csv = True

    #
    # Define base query (regarding "-d" option)
    #
    if options.data == 'job':
        _query = "query?"
    elif options.data == 'command':
        _query = "query/command?"
    else:
        print "Invalid data type specified (%r), possible values are: job or command" % options.data
        sys.exit(1)

    #
    # Creating corresponding query
    #
    userConstraint = ConstraintFactory.makeQuery(pUserArguments=args, pUserOptions=options)
    if userConstraint is None:
        sys.exit(1)

    _query += userConstraint

    #
    # Set hotsname/port if given as arguments
    #
    if options.hostname is not None:
        _hostname = options.hostname

    if options.port is not None:
        _port = options.port

    if VERBOSE:
        print "Host: %s" % _hostname
        print "Port: %s" % _port
        print "Request: %s" % _query
        # print "http://%s:%s/%s" % ( _hostname, _port, _query )

    _request = "http://%s:%s/%s" % (_hostname, _port, _query)

    http_client = HTTPClient()
    REQUEST_BEGIN_TIME = time.time()

    try:
        response = http_client.fetch(_request)
        handle_request(response)

    except HTTPError as e:
        print "Error:", e

    except socket.error as e:
        if e.errno == errno.ECONNREFUSED:
            print "Error: connection refused, puliserver might be unresponsive"

    del(http_client)
